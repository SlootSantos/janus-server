// Code generated by MockGen. DO NOT EDIT.
// Source: queue.go

// Package queue is a generated GoMock package.
package queue

import (
	sqs "github.com/aws/aws-sdk-go/service/sqs"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockqueueHandler is a mock of queueHandler interface
type MockqueueHandler struct {
	ctrl     *gomock.Controller
	recorder *MockqueueHandlerMockRecorder
}

// MockqueueHandlerMockRecorder is the mock recorder for MockqueueHandler
type MockqueueHandlerMockRecorder struct {
	mock *MockqueueHandler
}

// NewMockqueueHandler creates a new mock instance
func NewMockqueueHandler(ctrl *gomock.Controller) *MockqueueHandler {
	mock := &MockqueueHandler{ctrl: ctrl}
	mock.recorder = &MockqueueHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockqueueHandler) EXPECT() *MockqueueHandlerMockRecorder {
	return m.recorder
}

// SendMessage mocks base method
func (m *MockqueueHandler) SendMessage(arg0 *sqs.SendMessageInput) (*sqs.SendMessageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0)
	ret0, _ := ret[0].(*sqs.SendMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage
func (mr *MockqueueHandlerMockRecorder) SendMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockqueueHandler)(nil).SendMessage), arg0)
}

// ReceiveMessage mocks base method
func (m *MockqueueHandler) ReceiveMessage(arg0 *sqs.ReceiveMessageInput) (*sqs.ReceiveMessageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveMessage", arg0)
	ret0, _ := ret[0].(*sqs.ReceiveMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveMessage indicates an expected call of ReceiveMessage
func (mr *MockqueueHandlerMockRecorder) ReceiveMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveMessage", reflect.TypeOf((*MockqueueHandler)(nil).ReceiveMessage), arg0)
}

// DeleteMessage mocks base method
func (m *MockqueueHandler) DeleteMessage(arg0 *sqs.DeleteMessageInput) (*sqs.DeleteMessageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", arg0)
	ret0, _ := ret[0].(*sqs.DeleteMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMessage indicates an expected call of DeleteMessage
func (mr *MockqueueHandlerMockRecorder) DeleteMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockqueueHandler)(nil).DeleteMessage), arg0)
}
