// Code generated by MockGen. DO NOT EDIT.
// Source: iface.user.go

// Package storage is a generated GoMock package.
package storage

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserIface is a mock of UserIface interface
type MockUserIface struct {
	ctrl     *gomock.Controller
	recorder *MockUserIfaceMockRecorder
}

// MockUserIfaceMockRecorder is the mock recorder for MockUserIface
type MockUserIfaceMockRecorder struct {
	mock *MockUserIface
}

// NewMockUserIface creates a new mock instance
func NewMockUserIface(ctrl *gomock.Controller) *MockUserIface {
	mock := &MockUserIface{ctrl: ctrl}
	mock.recorder = &MockUserIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserIface) EXPECT() *MockUserIfaceMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockUserIface) Get(key string) (*UserModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(*UserModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockUserIfaceMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserIface)(nil).Get), key)
}

// Set mocks base method
func (m *MockUserIface) Set(key string, value *UserModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockUserIfaceMockRecorder) Set(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockUserIface)(nil).Set), key, value)
}
