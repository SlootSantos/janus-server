// Code generated by MockGen. DO NOT EDIT.
// Source: iface.repo.go

// Package storage is a generated GoMock package.
package storage

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepoIface is a mock of RepoIface interface
type MockRepoIface struct {
	ctrl     *gomock.Controller
	recorder *MockRepoIfaceMockRecorder
}

// MockRepoIfaceMockRecorder is the mock recorder for MockRepoIface
type MockRepoIfaceMockRecorder struct {
	mock *MockRepoIface
}

// NewMockRepoIface creates a new mock instance
func NewMockRepoIface(ctrl *gomock.Controller) *MockRepoIface {
	mock := &MockRepoIface{ctrl: ctrl}
	mock.recorder = &MockRepoIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepoIface) EXPECT() *MockRepoIfaceMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockRepoIface) Get(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRepoIfaceMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepoIface)(nil).Get), key)
}

// Set mocks base method
func (m *MockRepoIface) Set(key string, value []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set
func (mr *MockRepoIfaceMockRecorder) Set(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRepoIface)(nil).Set), key, value)
}
