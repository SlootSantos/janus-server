// Code generated by MockGen. DO NOT EDIT.
// Source: bucket.go

// Package bucket is a generated GoMock package.
package bucket

import (
	s3 "github.com/aws/aws-sdk-go/service/s3"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockbucketHandler is a mock of bucketHandler interface
type MockbucketHandler struct {
	ctrl     *gomock.Controller
	recorder *MockbucketHandlerMockRecorder
}

// MockbucketHandlerMockRecorder is the mock recorder for MockbucketHandler
type MockbucketHandlerMockRecorder struct {
	mock *MockbucketHandler
}

// NewMockbucketHandler creates a new mock instance
func NewMockbucketHandler(ctrl *gomock.Controller) *MockbucketHandler {
	mock := &MockbucketHandler{ctrl: ctrl}
	mock.recorder = &MockbucketHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockbucketHandler) EXPECT() *MockbucketHandlerMockRecorder {
	return m.recorder
}

// ListBuckets mocks base method
func (m *MockbucketHandler) ListBuckets(arg0 *s3.ListBucketsInput) (*s3.ListBucketsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBuckets", arg0)
	ret0, _ := ret[0].(*s3.ListBucketsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuckets indicates an expected call of ListBuckets
func (mr *MockbucketHandlerMockRecorder) ListBuckets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuckets", reflect.TypeOf((*MockbucketHandler)(nil).ListBuckets), arg0)
}

// CreateBucket mocks base method
func (m *MockbucketHandler) CreateBucket(arg0 *s3.CreateBucketInput) (*s3.CreateBucketOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBucket", arg0)
	ret0, _ := ret[0].(*s3.CreateBucketOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBucket indicates an expected call of CreateBucket
func (mr *MockbucketHandlerMockRecorder) CreateBucket(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucket", reflect.TypeOf((*MockbucketHandler)(nil).CreateBucket), arg0)
}

// DeleteBucket mocks base method
func (m *MockbucketHandler) DeleteBucket(arg0 *s3.DeleteBucketInput) (*s3.DeleteBucketOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucket", arg0)
	ret0, _ := ret[0].(*s3.DeleteBucketOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucket indicates an expected call of DeleteBucket
func (mr *MockbucketHandlerMockRecorder) DeleteBucket(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucket", reflect.TypeOf((*MockbucketHandler)(nil).DeleteBucket), arg0)
}

// ListObjects mocks base method
func (m *MockbucketHandler) ListObjects(arg0 *s3.ListObjectsInput) (*s3.ListObjectsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjects", arg0)
	ret0, _ := ret[0].(*s3.ListObjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjects indicates an expected call of ListObjects
func (mr *MockbucketHandlerMockRecorder) ListObjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjects", reflect.TypeOf((*MockbucketHandler)(nil).ListObjects), arg0)
}

// DeleteObjects mocks base method
func (m *MockbucketHandler) DeleteObjects(arg0 *s3.DeleteObjectsInput) (*s3.DeleteObjectsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjects", arg0)
	ret0, _ := ret[0].(*s3.DeleteObjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObjects indicates an expected call of DeleteObjects
func (mr *MockbucketHandlerMockRecorder) DeleteObjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjects", reflect.TypeOf((*MockbucketHandler)(nil).DeleteObjects), arg0)
}

// PutBucketPolicy mocks base method
func (m *MockbucketHandler) PutBucketPolicy(arg0 *s3.PutBucketPolicyInput) (*s3.PutBucketPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBucketPolicy", arg0)
	ret0, _ := ret[0].(*s3.PutBucketPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBucketPolicy indicates an expected call of PutBucketPolicy
func (mr *MockbucketHandlerMockRecorder) PutBucketPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBucketPolicy", reflect.TypeOf((*MockbucketHandler)(nil).PutBucketPolicy), arg0)
}
